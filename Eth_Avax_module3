// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RuchikaSwamiToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);

    constructor() {
        name = "SudeepDahiyaToken";
        symbol = "SDT";
        decimals = 20;
        totalSupply = 100 * 10** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;

        _mintTokens(msg.sender, 300 * 10**uint256(decimals));
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "The following function can only be accessed by the contract administrator.");
        _;
    }

    function _mintTokens(address _to, uint256 _amount) internal {
        require(_to != address(0), "Invalid address");
        totalSupply += _amount;
        balanceOf[_to] += _amount;
        emit Mint(_to, _amount);
        emit Transfer(address(0), _to, _amount);
    }

    function mint(address _to, uint256 _amount) public onlyOwner {
        _mintTokens(_to, _amount);
    }

    function burn(uint256 _amount) public {
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
        balanceOf[msg.sender] -= _amount;
        totalSupply -= _amount;
        emit Transfer(msg.sender, address(0), _amount);
    }

    function transfer(address _to, uint256 _amount) public {
        require(_to != address(0), "Invalid address");
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
        balanceOf[msg.sender] -= _amount;
        balanceOf[_to] += _amount;
        emit Transfer(msg.sender, _to, _amount);
    }
}
